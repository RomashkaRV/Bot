import Links from "@services/links";

import numberFormat from "@functions/numberFormat";

import { bot } from "@commands";

import { Message } from "node-telegram-bot-api";

export default async function watch(msg: Message, match: RegExpMatchArray | null) {
  const chatId = msg.chat.id;

  if (!match) {
    await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è.");
    return;
  }

  const link = match[1];

  try {
    bot.sendMessage(chatId, "–ú–∏–Ω—É—Ç–æ—á–∫—É, –ø—å–µ–º üçª –∏ –ø–∞—Ä—Å–∏–º —Å–∞–π—Ç–µ—Ü üôà")

    const getLink = await Links.get(chatId, link);

    if (!getLink) {
      const [linkInfo] = await Promise.all([
        Links.create(chatId, link)
      ]);

      await bot.sendMessage(chatId, `–¢–µ–ø–µ—Ä—å —è –Ω–∞–±–ª—é–¥–∞—é –∑–∞ ${linkInfo.name}\n–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${numberFormat(+linkInfo.price)} –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç`);
    } else {
      await bot.sendMessage(chatId, `–¢—ã –∑–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞? ${getLink.get("name")} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
    }
  } catch (error) {
    await bot.sendMessage(chatId, `‚ö†Ô∏è–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞`);
  }
}
